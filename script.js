// Khai b√°o API Key c·ªßa Gemini (Google AI)
const Genmini_KEY = "AIzaSyAsXqLNIGr4VPGf4kfvykzROKB6Fp2nAiw"; // Vui l√≤ng thay th·∫ø b·∫±ng API Key th·∫≠t c·ªßa b·∫°n!

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thao t√°c t·ª´ giao di·ªán HTML
const input = document.getElementById('inputImage');      // √î ch·ªçn ·∫£nh
const solutionDiv = document.getElementById('solution'); // Khu v·ª±c hi·ªÉn th·ªã k·∫øt qu·∫£ gi·∫£i
const chatBox = document.getElementById('chatBox');       // Khung chat
const chatInput = document.getElementById('chatInput');   // √î nh·∫≠p tin nh·∫Øn
const sendBtn = document.getElementById('sendBtn');       // N√∫t g·ª≠i tin nh·∫Øn

// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Gi·∫£i b√†i"
document.getElementById('solveBtn').addEventListener('click', async () => {
    if (!input.files || input.files.length === 0) {
        alert('Vui l√≤ng ch·ªçn m·ªôt ·∫£nh b√†i t·∫≠p!');
        return;
    }

    const imageFile = input.files[0];
    solutionDiv.innerText = "üß† ƒêang nh·∫≠n d·∫°ng ·∫£nh...";

    try {
        // D√πng Tesseract.js ƒë·ªÉ nh·∫≠n d·∫°ng vƒÉn b·∫£n trong ·∫£nh
        const result = await Tesseract.recognize(imageFile, 'eng', {
            logger: m => console.log(m) // In ra ti·∫øn tr√¨nh OCR
        });

        const extractedText = result.data.text.trim(); // L·∫•y vƒÉn b·∫£n ƒë√£ nh·∫≠n d·∫°ng
        if (!extractedText) {
            solutionDiv.innerText = "‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c n·ªôi dung trong ·∫£nh.";
            return;
        }

        // Hi·ªÉn th·ªã vƒÉn b·∫£n v√† g·ªçi AI ƒë·ªÉ gi·∫£i
        solutionDiv.innerText = `üìÑ N·ªôi dung nh·∫≠n d·∫°ng:\n${extractedText}\n\nü§ñ ƒêang gi·∫£i b√†i...`;

        // ƒê∆∞a c√¢u h·ªèi t·ª´ ·∫£nh v√†o khung chat
        addChatMessage("B·∫°n (·∫£nh)", extractedText, 'user');
        showTypingIndicator(); // Hi·ªán ch·ªâ b√°o AI ƒëang suy nghƒ©

        const aiReply = await getGeminiSolution(extractedText); // G·ª≠i cho Gemini

        solutionDiv.innerText = `üìÑ B√†i to√°n:\n${extractedText}\n\n‚úÖ L·ªùi gi·∫£i:\n${aiReply}`;
        hideTypingIndicator(); // ·∫®n ch·ªâ b√°o
        addChatMessage("AI", aiReply, 'ai'); // Th√™m l·ªùi gi·∫£i v√†o khung chat
    } catch (err) {
        console.error(err);
        solutionDiv.innerText = "‚ùå L·ªói khi nh·∫≠n d·∫°ng ho·∫∑c x·ª≠ l√Ω ·∫£nh.";
        hideTypingIndicator();
        addChatMessage("AI", "‚ö†Ô∏è L·ªói khi nh·∫≠n d·∫°ng ho·∫∑c x·ª≠ l√Ω ·∫£nh.", 'ai');
    }
});

// H√†m g·ª≠i vƒÉn b·∫£n t·ªõi Gemini API v√† l·∫•y k·∫øt qu·∫£ gi·∫£i b√†i to√°n
async function getGeminiSolution(text) {
    try {
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${Genmini_KEY}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ contents: [{ parts: [{ text }] }] })
        });

        const data = await response.json();
        return data.candidates?.[0]?.content?.parts?.[0]?.text || "ü§ñ Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.";
    } catch (error) {
        console.error("L·ªói g·ªçi Gemini:", error);
        return "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI.";
    }
}

// G·ª≠i tin nh·∫Øn khi nh·∫•n Enter trong √¥ chat
chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendBtn.click();
});

// G·ª≠i tin nh·∫Øn khi b·∫•m n√∫t G·ª≠i
sendBtn.addEventListener('click', async () => {
    const userText = chatInput.value.trim();
    if (!userText) return;

    addChatMessage('B·∫°n', userText, 'user'); // Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    chatInput.value = '';
    chatInput.disabled = true;
    sendBtn.disabled = true;

    showTypingIndicator(); // Hi·ªán AI ƒëang tr·∫£ l·ªùi
    await callGeminiAPI(userText); // G·ªçi AI ƒë·ªÉ tr·∫£ l·ªùi
    chatInput.disabled = false;
    sendBtn.disabled = false;
    chatInput.focus();
});

// H√†m th√™m tin nh·∫Øn v√†o khung chat (t·ª± ƒë·ªông cƒÉn tr√°i/ph·∫£i t√πy ng∆∞·ªùi g·ª≠i)
function addChatMessage(sender, text, type) {
    const msgDiv = document.createElement('div');
    msgDiv.classList.add('mb-3', 'p-3', 'rounded-lg', 'max-w-sm', 'whitespace-pre-line');

    if (type === 'user') {
        msgDiv.classList.add('bg-blue-500', 'text-white', 'ml-auto', 'text-right'); // Ng∆∞·ªùi d√πng: xanh, cƒÉn ph·∫£i
    } else {
        msgDiv.classList.add('bg-gray-100', 'text-gray-800', 'mr-auto'); // AI: x√°m, cƒÉn tr√°i
    }

    msgDiv.innerHTML = `
        <div class="font-bold mb-1 ${type === 'user' ? 'text-blue-100' : 'text-blue-600'}">${sender}</div>
        <div>${text}</div>
    `;

    chatBox.appendChild(msgDiv);
    chatBox.scrollTop = chatBox.scrollHeight; // T·ª± cu·ªôn xu·ªëng cu·ªëi
}

// Hi·ªÉn th·ªã hi·ªáu ·ª©ng AI ƒëang g√µ (g·ª£i c·∫£m gi√°c ƒë·ªëi tho·∫°i)
function showTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.classList.add('mb-3', 'p-3', 'rounded-lg', 'bg-gray-100', 'text-gray-600', 'max-w-sm', 'mr-auto');
    typingDiv.innerHTML = `
        <div class="font-bold mb-1 text-blue-600">AI</div>
        <div class="typing-dots">
            <span>‚óè</span><span>‚óè</span><span>‚óè</span> ƒêang suy nghƒ©...
        </div>
    `;
    chatBox.appendChild(typingDiv);
    chatBox.scrollTop = chatBox.scrollTop;
}

// ·∫®n hi·ªáu ·ª©ng AI ƒëang g√µ
function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) typingIndicator.remove();
}

// H√†m g·ªçi Gemini API ƒë·ªÉ tr·∫£ l·ªùi tin nh·∫Øn vƒÉn b·∫£n nh·∫≠p tay
async function callGeminiAPI(text) {
    try {
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${Genmini_KEY}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ contents: [{ parts: [{ text }] }] })
        });

        const data = await response.json();
        hideTypingIndicator();

        const reply = data.candidates?.[0]?.content?.parts?.[0]?.text || "ü§ñ Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.";
        addChatMessage('AI', reply, 'ai');
    } catch (error) {
        hideTypingIndicator();
        console.error("L·ªói khi g·ªçi Gemini API:", error);
        addChatMessage('AI', "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi g·ªçi API. Vui l√≤ng th·ª≠ l·∫°i sau.", 'ai');
    }
}

// Ch·ª©c nƒÉng l∆∞u l·∫°i l·ªãch s·ª≠ tr√≤ chuy·ªán
let historyData = [];
let filteredData = [];
let currentFilter = 'all';

// Initialize the page - ƒê√£ s·ª≠a ƒë·ªÉ g·ªçi setupEventListeners sau khi load d·ªØ li·ªáu
document.addEventListener('DOMContentLoaded', function () {
    loadHistoryData();
    setupEventListeners(); // G·ªçi h√†m n√†y ƒë·ªÉ thi·∫øt l·∫≠p t·∫•t c·∫£ c√°c s·ª± ki·ªán, bao g·ªìm x·ª≠ l√Ω tab
    updateStatistics(); // C·∫≠p nh·∫≠t th·ªëng k√™ ban ƒë·∫ßu
});

// Setup event listeners - ƒê√£ t√≠ch h·ª£p logic x·ª≠ l√Ω tab v√†o ƒë√¢y
function setupEventListeners() {
    // --- X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi Tab (ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt ph·∫ßn n√†y) ---
    const tabButtons = document.querySelectorAll('.tab-button'); // HTML c·ªßa b·∫°n d√πng class 'tab-button'
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', function (e) {
            e.preventDefault(); // NgƒÉn h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa th·∫ª <a> ho·∫∑c <button> n·∫øu c√≥
            // L·∫•y data-tab (v√≠ d·ª•: "historyTab", "statsTab", "liveClassTab")
            const targetTabId = this.dataset.tab;

            // X√≥a 'active' kh·ªèi t·∫•t c·∫£ n√∫t tab v√† ·∫©n t·∫•t c·∫£ n·ªôi dung tab
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.add('hidden'));

            // Th√™m 'active' cho n√∫t ƒë∆∞·ª£c click v√† hi·ªÉn th·ªã n·ªôi dung tab t∆∞∆°ng ·ª©ng
            this.classList.add('active');
            const targetContent = document.getElementById(targetTabId);
            if (targetContent) {
                targetContent.classList.remove('hidden');
            }

            // N·∫øu chuy·ªÉn sang tab th·ªëng k√™, g·ªçi h√†m loadDetailedStats
            if (targetTabId === 'statsTab') { // L∆∞u √Ω: dataset.tab l√† 'statsTab', kh√¥ng ph·∫£i 'stats'
                loadDetailedStats();
            }
        });
    });

    // Kh·ªüi t·∫°o tr·∫°ng th√°i tab ban ƒë·∫ßu khi t·∫£i trang
    // T√¨m n√∫t tab c√≥ class 'active' ban ƒë·∫ßu trong HTML
    const initialActiveTabButton = document.querySelector('.tab-button.active');
    if (initialActiveTabButton) {
        // Gi·∫£ l·∫≠p m·ªôt l·∫ßn click v√†o n√∫t active m·∫∑c ƒë·ªãnh ƒë·ªÉ kh·ªüi t·∫°o tr·∫°ng th√°i
        initialActiveTabButton.click();
    } else {
        // N·∫øu kh√¥ng c√≥ tab n√†o active m·∫∑c ƒë·ªãnh, m·∫∑c ƒë·ªãnh k√≠ch ho·∫°t tab "L·ªãch S·ª≠ H·ªçc T·∫≠p"
        const defaultTabButton = document.querySelector('[data-tab="historyTab"]');
        if (defaultTabButton) {
            defaultTabButton.click();
        }
    }

    // --- C√°c Event Listeners hi·ªán c√≥ c·ªßa b·∫°n (ƒë∆∞·ª£c gi·ªØ nguy√™n) ---

    // Filter buttons
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            setActiveFilter(this);
            filterHistory(this.dataset.filter);
        });
    });

    // Search input
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', function () {
            searchHistory();
        });
    }

    // Close modals when clicking outside
    window.addEventListener('click', function (event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });

    // L·∫Øng nghe s·ª± ki·ªán cho n√∫t "Xem L·ªùi Gi·∫£i B√†i To√°n" (solveBtn)
    // Ph·∫ßn n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ·ªü ƒë·∫ßu file, t√¥i ƒë√£ gi·ªØ nguy√™n ·ªü ƒë√≥ ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    // v√† ƒë·∫£m b·∫£o n√≥ ƒë∆∞·ª£c g√°n listener ngay l·∫≠p t·ª©c.
    // N·∫øu b·∫°n mu·ªën g√°n n√≥ trong setupEventListeners, h√£y di chuy·ªÉn n√≥ v√†o ƒë√¢y
    // v√† x√≥a ph·∫ßn `document.getElementById('solveBtn').addEventListener('click', ...)` ·ªü ƒë·∫ßu file.
    // D∆∞·ªõi ƒë√¢y l√† ph·∫ßn code ƒë√£ c√≥ trong setupEventListeners c·ªßa b·∫°n:
    const solveBtn = document.getElementById('solveBtn');
    const inputImage = document.getElementById('inputImage');
    const solutionDivForSolveBtn = document.getElementById('solution'); // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh tr√πng
    if (solveBtn && inputImage && solutionDivForSolveBtn) {
        solveBtn.addEventListener('click', async function () {
            if (inputImage.files.length === 0) {
                alert('Vui l√≤ng ch·ªçn m·ªôt ·∫£nh b√†i t·∫≠p.');
                return;
            }

            const file = inputImage.files[0];
            const reader = new FileReader();

            reader.onload = async function (e) {
                solutionDivForSolveBtn.innerHTML = '<div class="loading"><div class="spinner"></div> ƒêang x·ª≠ l√Ω...</div>';
                try {
                    // B∆∞·ªõc 1: OCR v·ªõi Tesseract.js
                    const { data: { text } } = await Tesseract.recognize(
                        e.target.result,
                        'vie', // Ng√¥n ng·ªØ ti·∫øng Vi·ªát
                        { logger: m => console.log(m) }
                    );

                    const problemText = text.trim();
                    if (!problemText) {
                        solutionDivForSolveBtn.innerHTML = 'Kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n trong ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c.';
                        return;
                    }

                    // G·ªçi API Gemini ho·∫∑c h√†m x·ª≠ l√Ω AI c·ªßa b·∫°n
                    // ƒê√¢y l√† n∆°i b·∫°n s·∫Ω g·ªçi getGeminiSolution th·ª±c s·ª±
                    const aiSolution = await getGeminiSolution(problemText); // G·ªçi h√†m ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n
                    const problemType = classifyProblemType(problemText); // H√†m ph√¢n lo·∫°i

                    solutionDivForSolveBtn.innerHTML = `
                        <h4 style="margin-bottom: 10px;">ƒê·ªÅ B√†i T·ª´ ·∫¢nh:</h4>
                        <div style="background: #f8f9fa; padding: 10px; border-radius: 8px; margin-bottom: 15px; border: 1px solid #eee;">
                            ${problemText.replace(/\n/g, '<br>')}
                        </div>
                        <h4 style="margin-bottom: 10px;">L·ªùi Gi·∫£i T·ª´ AI:</h4>
                        <div style="background: #e8f5e8; padding: 10px; border-radius: 8px; white-space: pre-line; border: 1px solid #cfc;">
                            ${aiSolution}
                        </div>
                    `;

                    // Th√™m b√†i gi·∫£i v√†o l·ªãch s·ª≠
                    addProblemToHistory(problemText, aiSolution, problemType);

                } catch (error) {
                    console.error('L·ªói x·ª≠ l√Ω ·∫£nh ho·∫∑c AI:', error);
                    solutionDivForSolveBtn.innerHTML = '<p style="color: red;">ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω b√†i t·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.</p>';
                }
            };
            reader.readAsDataURL(file);
        });
    }

    // L·∫Øng nghe s·ª± ki·ªán cho n√∫t "G·ª≠i" c·ªßa Chatbot
    // Ph·∫ßn n√†y c≈©ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ·ªü ƒë·∫ßu file, t√¥i ƒë√£ gi·ªØ nguy√™n ·ªü ƒë√≥.
    // N·∫øu b·∫°n mu·ªën g√°n n√≥ trong setupEventListeners, h√£y di chuy·ªÉn n√≥ v√†o ƒë√¢y
    // v√† x√≥a c√°c ph·∫ßn `chatInput.addEventListener('keypress', ...)` v√† `sendBtn.addEventListener('click', ...)` ·ªü ƒë·∫ßu file.
    // D∆∞·ªõi ƒë√¢y l√† ph·∫ßn code ƒë√£ c√≥ trong setupEventListeners c·ªßa b·∫°n:
    const chatInputForChatbot = document.getElementById('chatInput'); // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh tr√πng
    const sendBtnForChatbot = document.getElementById('sendBtn');     // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh tr√πng
    const chatBoxForChatbot = document.getElementById('chatBox');     // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh tr√πng

    if (chatInputForChatbot && sendBtnForChatbot && chatBoxForChatbot) {
        sendBtnForChatbot.addEventListener('click', async function () {
            const userMessage = chatInputForChatbot.value.trim();
            if (userMessage === '') return;

            // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o chat box
            appendMessage(chatBoxForChatbot, userMessage, 'user');
            chatInputForChatbot.value = '';
            chatBoxForChatbot.scrollTop = chatBoxForChatbot.scrollHeight; // Cu·ªôn xu·ªëng cu·ªëi

            // M√¥ ph·ªèng ph·∫£n h·ªìi t·ª´ AI
            appendMessage(chatBoxForChatbot, '<div class="loading-dots"><span>.</span><span>.</span><span>.</span></div>', 'ai');
            chatBoxForChatbot.scrollTop = chatBoxForChatbot.scrollHeight;

            try {
                // G·ªçi API Gemini ho·∫∑c h√†m x·ª≠ l√Ω AI c·ªßa b·∫°n
                const aiResponse = await callGeminiAPI(userMessage); // G·ªçi h√†m ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n

                // Lo·∫°i b·ªè loading dots
                const loadingDots = chatBoxForChatbot.querySelector('.loading-dots');
                if (loadingDots && loadingDots.parentElement) {
                    loadingDots.parentElement.remove(); // X√≥a div ch·ª©a loading dots
                }

                // addChatMessage ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·ªÉ kh√¥ng c·∫ßn appendMessage ri√™ng
                addChatMessage('AI', aiResponse, 'ai');
                chatBoxForChatbot.scrollTop = chatBoxForChatbot.scrollHeight;

                if (userMessage.length > 20 && !userMessage.toLowerCase().includes("ch√†o") && !userMessage.toLowerCase().includes("b·∫°n l√† ai")) {
                    const problemType = classifyProblemType(userMessage);
                    addProblemToHistory(userMessage, aiResponse, problemType);
                }

            } catch (error) {
                console.error('L·ªói chatbot:', error);
                // Lo·∫°i b·ªè loading dots v√† hi·ªÉn th·ªã l·ªói
                const loadingDots = chatBoxForChatbot.querySelector('.loading-dots');
                if (loadingDots && loadingDots.parentElement) {
                    loadingDots.parentElement.remove();
                }
                addChatMessage('AI', 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i.', 'ai');
                chatBoxForChatbot.scrollTop = chatBoxForChatbot.scrollHeight;
            }
        });

        // Cho ph√©p g·ª≠i tin nh·∫Øn b·∫±ng Enter
        chatInputForChatbot.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendBtnForChatbot.click();
            }
        });
    }

    // --- NEW CODE START: L·∫Øng nghe s·ª± ki·ªán cho n√∫t Tham gia Google Meet ---
    const joinGoogleMeetBtn = document.getElementById('join-google-meet-btn');
    if (joinGoogleMeetBtn) {
        joinGoogleMeetBtn.addEventListener('click', () => {
            // M·ªü li√™n k·∫øt Google Meet trong m·ªôt tab m·ªõi
            window.open('https://meet.google.com/new', '_blank');
        });
    }
    // --- NEW CODE END ---
}

// H√†m gi·∫£ l·∫≠p ph·∫£n h·ªìi c·ªßa Gemini (thay th·∫ø b·∫±ng API th·∫≠t c·ªßa b·∫°n)
// L∆∞u √Ω: H√†m n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong getGeminiSolution v√† callGeminiAPI ·ªü tr√™n
// n√™n b·∫°n kh√¥ng c·∫ßn simulateGeminiResponse v√† simulateChatbotResponse n·ªØa,
// tr·ª´ khi b·∫°n mu·ªën gi·ªØ l·∫°i ch√∫ng cho m·ª•c ƒë√≠ch m√¥ ph·ªèng.
// T√¥i s·∫Ω gi·ªØ l·∫°i simulateGeminiResponse v√† simulateChatbotResponse v√¨ code g·ªëc c·ªßa b·∫°n c√≥ ch√∫ng.
async function simulateGeminiResponse(problemText) {
    // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ª≠i `problemText` ƒë·∫øn Gemini API v√† nh·∫≠n l·∫°i l·ªùi gi·∫£i.
    console.log("M√¥ ph·ªèng g·ªçi Gemini v·ªõi ƒë·ªÅ:", problemText);
    return new Promise(resolve => {
        setTimeout(() => {
            let solution = "ƒê√¢y l√† l·ªùi gi·∫£i m√¥ ph·ªèng t·ª´ AI cho ƒë·ªÅ b√†i c·ªßa b·∫°n.";
            if (problemText.toLowerCase().includes("ph∆∞∆°ng tr√¨nh")) {
                solution = "ƒê·ªÉ gi·∫£i ph∆∞∆°ng tr√¨nh n√†y, ta th·ª±c hi·ªán c√°c b∆∞·ªõc sau:\n1. Thu g·ªçn c√°c s·ªë h·∫°ng.\n2. Chuy·ªÉn v·∫ø ƒë·ªÉ t√¨m gi√° tr·ªã c·ªßa bi·∫øn.\nV√≠ d·ª•: 2x + 4 = 10 => 2x = 6 => x = 3.";
            } else if (problemText.toLowerCase().includes("di·ªán t√≠ch") || problemText.toLowerCase().includes("h√¨nh tr√≤n") || problemText.toLowerCase().includes("h√¨nh vu√¥ng")) {
                solution = "ƒê·ªÉ t√≠nh di·ªán t√≠ch, b·∫°n c·∫ßn bi·∫øt c√¥ng th·ª©c ph√π h·ª£p v·ªõi h√¨nh d·∫°ng. V√≠ d·ª•, di·ªán t√≠ch h√¨nh tr√≤n l√† pi*r^2.";
            } else if (problemText.toLowerCase().includes("ƒë·∫°o h√†m")) {
                solution = "ƒê·∫°o h√†m l√† t·ªëc ƒë·ªô thay ƒë·ªïi c·ªßa h√†m s·ªë. V√≠ d·ª•: ƒë·∫°o h√†m c·ªßa x^2 l√† 2x.";
            } else if (problemText.toLowerCase().includes("sin") || problemText.toLowerCase().includes("cos")) {
                solution = "C√°c h√†m l∆∞·ª£ng gi√°c sin, cos, tan th∆∞·ªùng ƒë∆∞·ª£c d√πng trong h√¨nh h·ªçc v√† v·∫≠t l√Ω. B·∫°n c√≥ th·ªÉ d√πng b·∫£ng gi√° tr·ªã ho·∫∑c m√°y t√≠nh.";
            }
            resolve(solution);
        }, 1500); // M√¥ ph·ªèng ƒë·ªô tr·ªÖ API
    });
}

// H√†m gi·∫£ l·∫≠p ph·∫£n h·ªìi c·ªßa Chatbot (thay th·∫ø b·∫±ng API th·∫≠t c·ªßa b·∫°n)
async function simulateChatbotResponse(userMessage) {
    console.log("M√¥ ph·ªèng chatbot v·ªõi tin nh·∫Øn:", userMessage);
    return new Promise(resolve => {
        setTimeout(() => {
            let response = "T√¥i l√† AI gia s∆∞, r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ to√°n h·ªçc kh√¥ng?";
            if (userMessage.toLowerCase().includes("gi·∫£i b√†i")) {
                response = "B·∫°n c√≥ th·ªÉ g·ª≠i ƒë·ªÅ b√†i cho t√¥i, t√¥i s·∫Ω c·ªë g·∫Øng gi·∫£i ƒë√°p chi ti·∫øt.";
            } else if (userMessage.toLowerCase().includes("c√¥ng th·ª©c") || userMessage.toLowerCase().includes("l√† g√¨")) {
                response = "ƒê·ªÉ t√¥i t√¨m hi·ªÉu v√† gi·∫£i th√≠ch cho b·∫°n v·ªÅ c√¥ng th·ª©c n√†y.";
            } else if (userMessage.toLowerCase().includes("b·∫°n l√† ai")) {
                response = "T√¥i l√† m·ªôt tr·ª£ l√Ω AI ƒë∆∞·ª£c ƒë√†o t·∫°o b·ªüi Google ƒë·ªÉ h·ªó tr·ª£ b·∫°n h·ªçc to√°n.";
            }
            resolve(response);
        }, 1000); // M√¥ ph·ªèng ƒë·ªô tr·ªÖ
    });
}

// H√†m ƒë·ªÉ th√™m tin nh·∫Øn v√†o chat box
function appendMessage(chatBoxElement, message, sender) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('chat-message', sender);
    messageElement.innerHTML = message; // D√πng innerHTML ƒë·ªÉ h·ªó tr·ª£ loading dots
    chatBoxElement.appendChild(messageElement);
}

// H√†m ph√¢n lo·∫°i lo·∫°i b√†i t·∫≠p (c√≥ th·ªÉ c·∫£i ti·∫øn b·∫±ng AI sau n√†y)
function classifyProblemType(text) {
    text = text.toLowerCase();
    if (text.includes("ph∆∞∆°ng tr√¨nh") || text.includes("gi·∫£i pt") || text.includes("t√¨m x") || text.includes("h·ªá ph∆∞∆°ng tr√¨nh")) {
        return "equation";
    }
    if (text.includes("di·ªán t√≠ch") || text.includes("chu vi") || text.includes("h√¨nh tr√≤n") || text.includes("h√¨nh vu√¥ng") || text.includes("h√¨nh tam gi√°c") || text.includes("h√¨nh h·ªçc")) {
        return "geometry";
    }
    if (text.includes("ƒë·∫°o h√†m") || text.includes("nguy√™n h√†m") || text.includes("t√≠ch ph√¢n") || text.includes("gi·ªõi h·∫°n")) {
        return "calculus";
    }
    if (text.includes("sin") || text.includes("cos") || text.includes("tan") || text.includes("l∆∞·ª£ng gi√°c")) {
        return "trigonometry";
    }
    // M·∫∑c ƒë·ªãnh ho·∫∑c khi kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c r√µ
    return "algebra";
}

// Load history data (mock data for demo)
function loadHistoryData() {
    // Simulate loading from localStorage or API
    const savedHistory = localStorage.getItem('mathHistory');
    if (savedHistory) {
        historyData = JSON.parse(savedHistory);
    } else {
        // Generate sample data (ch·ªâ ch·∫°y khi ch∆∞a c√≥ l·ªãch s·ª≠)
        historyData = generateSampleHistory();
        localStorage.setItem('mathHistory', JSON.stringify(historyData));
    }

    filteredData = [...historyData];
    renderHistory();
}

// Generate sample history data
function generateSampleHistory() {
    const sampleProblems = [
        {
            id: 1,
            problem: "Gi·∫£i ph∆∞∆°ng tr√¨nh: 2x + 3 = 7",
            solution: "B∆∞·ªõc 1: Chuy·ªÉn 3 sang v·∫ø ph·∫£i: 2x = 7 - 3 = 4\nB∆∞·ªõc 2: Chia hai v·∫ø cho 2: x = 4/2 = 2",
            type: "equation",
            timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
            favorite: false
        },
        {
            id: 2,
            problem: "T√≠nh di·ªán t√≠ch h√¨nh tr√≤n c√≥ b√°n k√≠nh 5cm",
            solution: "C√¥ng th·ª©c: S = œÄr¬≤\nS = œÄ √ó 5¬≤ = 25œÄ ‚âà 78.54 cm¬≤",
            type: "geometry",
            timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),
            favorite: true
        },
        {
            id: 3,
            problem: "T√≠nh ƒë·∫°o h√†m c·ªßa f(x) = x¬≥ + 2x¬≤ - 5x + 1",
            solution: "f'(x) = 3x¬≤ + 4x - 5",
            type: "calculus",
            timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
            favorite: false
        },
        {
            id: 4,
            problem: "T√≠nh sin(30¬∞) + cos(60¬∞)",
            solution: "sin(30¬∞) = 1/2\ncos(60¬∞) = 1/2\nK·∫øt qu·∫£: 1/2 + 1/2 = 1",
            type: "trigonometry",
            timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
            favorite: true
        },
        {
            id: 5,
            problem: "Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh: x + y = 5, 2x - y = 1",
            solution: "T·ª´ ph∆∞∆°ng tr√¨nh 1: y = 5 - x\nTh·∫ø v√†o ph∆∞∆°ng tr√¨nh 2: 2x - (5 - x) = 1\n3x - 5 = 1\nx = 2, y = 3",
            type: "algebra",
            timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
            favorite: false
        }
    ];
    return sampleProblems;
}

// Render history list
function renderHistory() {
    const historyList = document.getElementById('historyList');
    if (!historyList) return;

    if (filteredData.length === 0) {
        historyList.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìö</div>
                <h3>Ch∆∞a c√≥ l·ªãch s·ª≠</h3>
                <p>H√£y b·∫Øt ƒë·∫ßu gi·∫£i b√†i t·∫≠p ƒë·ªÉ xem l·ªãch s·ª≠ t·∫°i ƒë√¢y!</p>
            </div>
        `;
        return;
    }

    const historyHTML = filteredData.map(item => `
        <div class="history-item" onclick="showProblemDetails(${item.id})">
            <div class="history-item-header">
                <div>
                    <span class="problem-type type-${item.type}">${getTypeLabel(item.type)}</span>
                    ${item.favorite ? '<span style="color: #ffc107; margin-left: 10px;">‚≠ê</span>' : ''}
                </div>
                <div class="timestamp">${formatTimestamp(item.timestamp)}</div>
            </div>
            <div class="problem-preview">${item.problem}</div>
            <div class="solution-preview">${item.solution.substring(0, 100)}...</div>
            <div class="history-actions">
                <button class="action-btn" onclick="event.stopPropagation(); toggleFavorite(${item.id})">
                    ${item.favorite ? '‚≠ê B·ªè y√™u th√≠ch' : '‚òÜ Y√™u th√≠ch'}
                </button>
                <button class="action-btn" onclick="event.stopPropagation(); shareProblem(${item.id})">üì§ Chia s·∫ª</button>
                <button class="action-btn" onclick="event.stopPropagation(); deleteHistoryItem(${item.id})">üóëÔ∏è X√≥a</button>
            </div>
        </div>
    `).join('');

    historyList.innerHTML = historyHTML;
}

// Get type label in Vietnamese
function getTypeLabel(type) {
    const labels = {
        equation: 'Ph∆∞∆°ng Tr√¨nh',
        geometry: 'H√¨nh H·ªçc',
        calculus: 'Gi·∫£i T√≠ch',
        trigonometry: 'L∆∞·ª£ng Gi√°c',
        algebra: 'ƒê·∫°i S·ªë'
    };
    return labels[type] || 'Kh√°c';
}

// Format timestamp
function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now - date;
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffHours < 1) return 'V·ª´a xong';
    if (diffHours < 24) return `${diffHours} gi·ªù tr∆∞·ªõc`;
    if (diffDays < 7) return `${diffDays} ng√†y tr∆∞·ªõc`;
    return date.toLocaleDateString('vi-VN');
}

// Filter history
function filterHistory(filter) {
    currentFilter = filter;
    if (filter === 'all') {
        filteredData = [...historyData];
    } else {
        filteredData = historyData.filter(item => item.type === filter);
    }
    renderHistory();
}

// Search history
function searchHistory() {
    const searchInput = document.getElementById('searchInput');
    if (!searchInput) return;

    const searchTerm = searchInput.value.toLowerCase();
    if (searchTerm === '') {
        filterHistory(currentFilter);
        return;
    }

    filteredData = historyData.filter(item =>
        item.problem.toLowerCase().includes(searchTerm) ||
        item.solution.toLowerCase().includes(searchTerm)
    );
    renderHistory();
}

// Set active filter button
function setActiveFilter(activeBtn) {
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    activeBtn.classList.add('active');
}

// Update statistics
function updateStatistics() {
    const total = historyData.length;
    const today = historyData.filter(item => {
        const itemDate = new Date(item.timestamp);
        const todayDate = new Date();
        return itemDate.toDateString() === todayDate.toDateString();
    }).length;

    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    const week = historyData.filter(item => new Date(item.timestamp) > weekAgo).length;

    // Find most common type
    const typeCounts = {};
    historyData.forEach(item => {
        typeCounts[item.type] = (typeCounts[item.type] || 0) + 1;
    });
    // Tr√°nh l·ªói khi typeCounts r·ªóng (n·∫øu historyData r·ªóng)
    let favoriteType = 'Kh√°c';
    if (Object.keys(typeCounts).length > 0) {
        favoriteType = Object.keys(typeCounts).reduce((a, b) =>
            typeCounts[a] > typeCounts[b] ? a : b
        );
    }

    const totalEl = document.getElementById('totalProblems');
    const todayEl = document.getElementById('todayProblems');
    const weekEl = document.getElementById('weekProblems');
    const favoriteTypeEl = document.getElementById('favoriteType');

    if (totalEl) totalEl.textContent = total;
    if (todayEl) todayEl.textContent = today;
    if (weekEl) weekEl.textContent = week;
    if (favoriteTypeEl) favoriteTypeEl.textContent = getTypeLabel(favoriteType);
}

// Load detailed statistics
function loadDetailedStats() {
    const statsContainer = document.getElementById('detailedStats');
    if (!statsContainer) return;

    // Calculate detailed statistics
    const typeStats = {};
    historyData.forEach(item => {
        if (!typeStats[item.type]) {
            typeStats[item.type] = { count: 0, recent: 0 };
        }
        typeStats[item.type].count++;

        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        if (new Date(item.timestamp) > weekAgo) {
            typeStats[item.type].recent++;
        }
    });

    // Tr√°nh l·ªói khi typeStats r·ªóng
    let mostFavoriteType = 'Kh√°c';
    if (Object.keys(typeStats).length > 0) {
        mostFavoriteType = Object.keys(typeStats).reduce((a, b) => typeStats[a].count > typeStats[b].count ? a : b);
    }

    const statsHTML = `
        <div class="stats-grid">
            ${Object.entries(typeStats).map(([type, stats]) => `
                <div class="stat-card">
                    <div class="stat-number">${stats.count}</div>
                    <div class="stat-label">${getTypeLabel(type)}</div>
                    <div style="font-size: 12px; color: #999; margin-top: 5px;">
                        ${stats.recent} tu·∫ßn n√†y
                    </div>
                </div>
            `).join('')}
        </div>

        <div style="margin-top: 30px; color: black;">
            <h3>üìà Xu H∆∞·ªõng H·ªçc T·∫≠p</h3>
            <div style="background: var(--card--bg); padding: 20px; border-radius: 15px; margin-top: 15px; color: black;">
                <p>‚Ä¢ B·∫°n ƒë√£ gi·∫£i t·ªïng c·ªông <strong>${historyData.length}</strong> b√†i t·∫≠p</p>
                <p>‚Ä¢ D·∫°ng b√†i y√™u th√≠ch nh·∫•t: <strong>${getTypeLabel(mostFavoriteType)}</strong></p>
                <p>‚Ä¢ S·ªë b√†i y√™u th√≠ch: <strong>${historyData.filter(item => item.favorite).length}</strong></p>
                <p>‚Ä¢ Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y: ${historyData.filter(item => {
        const threeDaysAgo = new Date();
        threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
        return new Date(item.timestamp) > threeDaysAgo;
    }).length} b√†i trong 3 ng√†y qua</p>
            </div>
        </div>
    `;

    statsContainer.innerHTML = statsHTML;
}

// Show problem details in modal
function showProblemDetails(id) {
    const problem = historyData.find(item => item.id === id);
    if (!problem) return;

    const modalContent = document.getElementById('modalContent');
    if (!modalContent) return;

    modalContent.innerHTML = `
        <div class="problem-type type-${problem.type}" style="display: inline-block; margin-bottom: 15px;">
            ${getTypeLabel(problem.type)}
        </div>
        <h4 style="margin-bottom: 15px;">ƒê·ªÅ B√†i:</h4>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 20px;">
            ${problem.problem}
        </div>
        <h4 style="margin-bottom: 15px;">L·ªùi Gi·∫£i:</h4>
        <div style="background: #e8f5e8; padding: 15px; border-radius: 10px; white-space: pre-line;">
            ${problem.solution}
        </div>
        <div style="margin-top: 20px; text-align: center;">
            <button class="action-btn" onclick="toggleFavorite(${problem.id}); closeModal('problemModal');">
                ${problem.favorite ? '‚≠ê B·ªè y√™u th√≠ch' : '‚òÜ Th√™m y√™u th√≠ch'}
            </button>
            <button class="action-btn" onclick="shareProblem(${problem.id})">üì§ Chia s·∫ª</button>
        </div>
    `;

    const problemModal = document.getElementById('problemModal');
    if (problemModal) {
        problemModal.style.display = 'block';
    }
}

// Toggle favorite status
function toggleFavorite(id) {
    const problem = historyData.find(item => item.id === id);
    if (problem) {
        problem.favorite = !problem.favorite;
        localStorage.setItem('mathHistory', JSON.stringify(historyData));
        renderHistory();
        updateStatistics(); // C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™ khi y√™u th√≠ch/b·ªè y√™u th√≠ch
    }
}

// Share problem
function shareProblem(id) {
    const problem = historyData.find(item => item.id === id);
    if (problem && navigator.share) {
        navigator.share({
            title: 'B√†i t·∫≠p to√°n',
            text: `ƒê·ªÅ b√†i: ${problem.problem}\nL·ªùi gi·∫£i: ${problem.solution}`,
            url: window.location.href
        });
    } else if (problem) {
        // Fallback: copy to clipboard
        navigator.clipboard.writeText(`ƒê·ªÅ b√†i: ${problem.problem}\nL·ªùi gi·∫£i: ${problem.solution.substring(0, 200)}...`).then(() => {
            alert('ƒê√£ sao ch√©p ƒë·ªÅ b√†i v√† l·ªùi gi·∫£i v√†o clipboard!');
        });
    }
}

// Delete history item
function deleteHistoryItem(id) {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i t·∫≠p n√†y?')) {
        historyData = historyData.filter(item => item.id !== id);
        filteredData = filteredData.filter(item => item.id !== id);
        localStorage.setItem('mathHistory', JSON.stringify(historyData));
        renderHistory();
        updateStatistics();
    }
}

// Close modal
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// Close all modals
function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
}

// H√†m ƒë·ªÉ th√™m b√†i gi·∫£i m·ªõi v√†o l·ªãch s·ª≠
function addProblemToHistory(problemText, solutionText, problemType) {
    // T·∫°o ID m·ªõi, ƒë·∫£m b·∫£o duy nh·∫•t
    const newId = historyData.length > 0 ? Math.max(...historyData.map(item => item.id)) + 1 : 1;
    const newItem = {
        id: newId,
        problem: problemText,
        solution: solutionText,
        type: problemType,
        timestamp: new Date().toISOString(),
        favorite: false
    };
    historyData.push(newItem);
    localStorage.setItem('mathHistory', JSON.stringify(historyData));
    filteredData = [...historyData]; // C·∫≠p nh·∫≠t filteredData ƒë·ªÉ hi·ªÉn th·ªã ngay
    renderHistory(); // Render l·∫°i danh s√°ch ƒë·ªÉ hi·ªÉn th·ªã m·ª•c m·ªõi
    updateStatistics(); // C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™
}

// Th√™m h√†m clearHistory (n·∫øu ch∆∞a c√≥)
function clearHistory() {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ l·ªãch s·ª≠ h·ªçc t·∫≠p? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
        historyData = [];
        filteredData = [];
        localStorage.removeItem('mathHistory'); // X√≥a kh·ªèi localStorage
        renderHistory(); // Render l·∫°i danh s√°ch tr·ªëng
        updateStatistics(); // C·∫≠p nh·∫≠t l·∫°i th·ªëng k√™
        alert('ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠ h·ªçc t·∫≠p.');
    }
}


// Alternative: Simple functional approach (if you prefer not to use classes)

class ThemeManager {
    constructor() {
        this.currentTheme = localStorage.getItem('theme') || 'blue';
        this.isDarkMode = localStorage.getItem('darkMode') === 'true';
        this.init();
    }

    init() {
        this.applyTheme();
        this.setupEventListeners();
        this.updateUI();
    }

    setupEventListeners() {
        // Dark/Light mode toggle
        const themeToggle = document.getElementById('themeToggle');
        themeToggle.addEventListener('click', () => this.toggleDarkMode());

        // Color theme switchers
        document.querySelectorAll('.color-switchers .btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const theme = e.target.dataset.theme;
                this.setColorTheme(theme);
            });
        });
    }

    toggleDarkMode() {
        this.isDarkMode = !this.isDarkMode;
        localStorage.setItem('darkMode', this.isDarkMode);
        this.applyTheme();
        this.updateUI();
    }

    setColorTheme(theme) {
        this.currentTheme = theme;
        localStorage.setItem('theme', theme);
        this.applyTheme();
        this.updateActiveTheme();
    }

    applyTheme() {
        const root = document.documentElement;

        // Apply dark/light mode
        if (this.isDarkMode) {
            document.body.setAttribute('data-theme', 'dark');
        } else {
            document.body.removeAttribute('data-theme');
        }

        // Apply color theme
        const themes = {
            blue: {
                primary: '#fff',
                secondary: '#24292d',
                accent: '#4070f4',
                accentHover: '#0b3cc1',
                accentLight: '#F0F8FF'
            },
            orange: {
                primary: '#fff',
                secondary: '#242526',
                accent: '#F79F1F',
                accentHover: '#DD8808',
                accentLight: '#fef5e6'
            },
            purple: {
                primary: '#fff',
                secondary: '#242526',
                accent: '#8e44ad',
                accentHover: '#783993',
                accentLight: '#eadaf1'
            },
            green: {
                primary: '#fff',
                secondary: '#242526',
                accent: '#3A9943',
                accentHover: '#2A6F31',
                accentLight: '#DAF1DC'
            }
        };

        const selectedTheme = themes[this.currentTheme];
        if (selectedTheme) {
            root.style.setProperty('--accent-color', selectedTheme.accent);
            root.style.setProperty('--accent-hover', selectedTheme.accentHover);
            root.style.setProperty('--accent-light', selectedTheme.accentLight);
        }

        // Add transition class for smooth theme changes
        document.body.classList.add('theme-transition');
        setTimeout(() => {
            document.body.classList.remove('theme-transition');
        }, 300);
    }

    updateUI() {
        const themeToggle = document.getElementById('themeToggle');
        if (this.isDarkMode) {
            themeToggle.className = 'btn fas fa-sun';
            themeToggle.title = 'Switch to Light Mode';
        } else {
            themeToggle.className = 'btn fas fa-moon';
            themeToggle.title = 'Switch to Dark Mode';
        }
    }

    updateActiveTheme() {
        document.querySelectorAll('.color-switchers .btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.theme === this.currentTheme) {
                btn.classList.add('active');
            }
        });
    }
}

// Initialize theme manager
const themeManager = new ThemeManager();

document.addEventListener('DOMContentLoaded', () => {
    themeManager.updateActiveTheme();
});

// Add smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// B·ªô ƒêi·ªÅu Khi·ªÉn Hi·ªáu ·ª®ng Cu·ªôn Trang cho EduVision AI
class ScrollAnimationController {
  constructor() {
    this.animatedElements = new Set()
    this.init()
  }
  
  init() {
    this.setupIntersectionObserver()
    this.setupSmoothScrolling()
    this.setupScrollToTop()
    this.setupParallaxEffects()
    this.setupCounterAnimations()
    this.setupProgressBars()
  }
  
  // Observer ch√≠nh cho hi·ªáu ·ª©ng cu·ªôn trang
  setupIntersectionObserver() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    }
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && !this.animatedElements.has(entry.target)) {
          this.animateElement(entry.target)
          this.animatedElements.add(entry.target)
        }
      })
    }, observerOptions)
    
    // Quan s√°t t·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥ class scroll-animate
    document.querySelectorAll(".scroll-animate").forEach((el) => {
      observer.observe(el)
    })
    
    // Quan s√°t th·∫ª t√≠nh nƒÉng cho hi·ªáu ·ª©ng l·ªách th·ªùi gian
    document.querySelectorAll(".feature-card").forEach((el, index) => {
      el.style.animationDelay = `${index * 0.1}s`
      observer.observe(el)
    })
    
    // Quan s√°t th·∫ª b∆∞·ªõc
    document.querySelectorAll(".step-card").forEach((el, index) => {
      el.style.animationDelay = `${index * 0.2}s`
      observer.observe(el)
    })
    
    // Quan s√°t th·∫ª gi√° c·∫£
    document.querySelectorAll(".pricing-card").forEach((el, index) => {
      el.style.animationDelay = `${index * 0.15}s`
      observer.observe(el)
    })
  }
  
  // T·∫°o ho·∫°t h√¨nh cho t·ª´ng ph·∫ßn t·ª≠
  animateElement(element) {
    const animationType = element.dataset.animation || "fadeInUp"
    element.style.opacity = "1"
    element.style.transform = "translateY(0)"
    element.classList.add("animate-in", animationType)
    
    // Th√™m ho·∫°t h√¨nh ƒë·∫∑c bi·ªát cho c√°c ph·∫ßn t·ª≠ c·ª• th·ªÉ
    if (element.classList.contains("feature-card")) {
      this.animateFeatureCard(element)
    } else if (element.classList.contains("step-card")) {
      this.animateStepCard(element)
    } else if (element.classList.contains("pricing-card")) {
      this.animatePricingCard(element)
    }
  }
  
  // Ho·∫°t h√¨nh ƒë·∫∑c bi·ªát cho th·∫ª t√≠nh nƒÉng
  animateFeatureCard(card) {
    const icon = card.querySelector(".feature-icon")
    if (icon) {
      setTimeout(() => {
        icon.style.transform = "scale(1.1) rotate(5deg)"
        setTimeout(() => {
          icon.style.transform = "scale(1) rotate(0deg)"
        }, 300)
      }, 200)
    }
  }
  
  // Ho·∫°t h√¨nh ƒë·∫∑c bi·ªát cho th·∫ª b∆∞·ªõc
  animateStepCard(card) {
    const stepNumber = card.querySelector(".step-number")
    if (stepNumber) {
      stepNumber.style.transform = "scale(0)"
      setTimeout(() => {
        stepNumber.style.transition = "transform 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55)"
        stepNumber.style.transform = "scale(1)"
      }, 100)
    }
  }
  
  // Ho·∫°t h√¨nh ƒë·∫∑c bi·ªát cho th·∫ª gi√° c·∫£
  animatePricingCard(card) {
    const price = card.querySelector(".pricing-price")
    if (price) {
      this.animateCounter(price, 0, Number.parseInt(price.textContent.replace(/\D/g, "")) || 0, 1000)
    }
  }
  
  // Ho·∫°t h√¨nh ƒë·∫øm s·ªë
  animateCounter(element, start, end, duration) {
    const startTime = performance.now()
    const originalText = element.textContent
    
    const updateCounter = (currentTime) => {
      const elapsed = currentTime - startTime
      const progress = Math.min(elapsed / duration, 1)
      const current = Math.floor(start + (end - start) * this.easeOutCubic(progress))
      
      if (originalText.includes("vnƒë")) {
        element.textContent = `${current.toLocaleString()} vnƒë`
      } else if (originalText.includes("%")) {
        element.textContent = `${current}%`
      } else {
        element.textContent = current.toLocaleString()
      }
      
      if (progress < 1) {
        requestAnimationFrame(updateCounter)
      } else {
        element.textContent = originalText
      }
    }
    
    requestAnimationFrame(updateCounter)
  }
  
  // H√†m l√†m m·ªÅm chuy·ªÉn ƒë·ªông
  easeOutCubic(t) {
    return 1 - Math.pow(1 - t, 3)
  }
  
  // Thi·∫øt l·∫≠p cu·ªôn m∆∞·ª£t cho li√™n k·∫øt neo
  setupSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", (e) => {
        e.preventDefault()
        const target = document.querySelector(anchor.getAttribute("href"))
        if (target) {
          target.scrollIntoView({
            behavior: "smooth",
            block: "start",
          })
        }
      })
    })
  }
  
  // Thi·∫øt l·∫≠p ch·ª©c nƒÉng cu·ªôn l√™n ƒë·∫ßu trang
  setupScrollToTop() {
    // T·∫°o n√∫t cu·ªôn l√™n ƒë·∫ßu trang
    const scrollToTopBtn = document.createElement("button")
    scrollToTopBtn.innerHTML = "‚Üë"
    scrollToTopBtn.className = "scroll-to-top"
    scrollToTopBtn.style.cssText = `
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--accent-color);
            color: white;
            border: none;
            font-size: 20px;
            cursor: pointer;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            z-index: 1000;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        `
    document.body.appendChild(scrollToTopBtn)
    
    // Hi·ªÉn th·ªã/·∫©n n√∫t cu·ªôn l√™n ƒë·∫ßu trang
    window.addEventListener("scroll", () => {
      if (window.pageYOffset > 300) {
        scrollToTopBtn.style.opacity = "1"
        scrollToTopBtn.style.visibility = "visible"
      } else {
        scrollToTopBtn.style.opacity = "0"
        scrollToTopBtn.style.visibility = "hidden"
      }
    })
    
    // Ch·ª©c nƒÉng cu·ªôn l√™n ƒë·∫ßu trang
    scrollToTopBtn.addEventListener("click", () => {
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      })
    })
  }
  
  // Thi·∫øt l·∫≠p hi·ªáu ·ª©ng th·ªã sai
  setupParallaxEffects() {
    const parallaxElements = document.querySelectorAll(".floating-equation")
    
    window.addEventListener("scroll", () => {
      const scrolled = window.pageYOffset
      const rate = scrolled * -0.5
      
      parallaxElements.forEach((element, index) => {
        const speed = 0.5 + index * 0.1
        element.style.transform = `translateY(${rate * speed}px)`
      })
    })
  }
  
  // Thi·∫øt l·∫≠p ho·∫°t h√¨nh ƒë·∫øm cho th·ªëng k√™
  setupCounterAnimations() {
    const statNumbers = document.querySelectorAll(".stat-number, .loop-number")
    
    const counterObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && !entry.target.dataset.animated) {
            const target = Number.parseInt(entry.target.textContent.replace(/\D/g, "")) || 0
            this.animateCounter(entry.target, 0, target, 2000)
            entry.target.dataset.animated = "true"
          }
        })
      },
      { threshold: 0.5 },
    )
    
    statNumbers.forEach((el) => {
      counterObserver.observe(el)
    })
  }
  
  // Thi·∫øt l·∫≠p thanh ti·∫øn ƒë·ªô (n·∫øu c√≥)
  setupProgressBars() {
    const progressBars = document.querySelectorAll(".progress-bar")
    
    const progressObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const progressBar = entry.target
            const targetWidth = progressBar.dataset.progress || "100"
            progressBar.style.width = "0%"
            setTimeout(() => {
              progressBar.style.transition = "width 2s ease-out"
              progressBar.style.width = targetWidth + "%"
            }, 200)
          }
        })
      },
      { threshold: 0.5 },
    )
    
    progressBars.forEach((bar) => {
      progressObserver.observe(bar)
    })
  }
  
  // Th√™m ho·∫°t h√¨nh ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi cu·ªôn cho c√°c ph·∫ßn c·ª• th·ªÉ
  setupSectionAnimations() {
    const sections = document.querySelectorAll("section")
    
    const sectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("section-visible")
            
            // K√≠ch ho·∫°t ho·∫°t h√¨nh c·ª• th·ªÉ d·ª±a tr√™n ph·∫ßn
            if (entry.target.classList.contains("features")) {
              this.animateFeatureSection(entry.target)
            } else if (entry.target.classList.contains("how-it-works")) {
              this.animateStepsSection(entry.target)
            } else if (entry.target.classList.contains("pricing")) {
              this.animatePricingSection(entry.target)
            }
          }
        })
      },
      { threshold: 0.2 },
    )
    
    sections.forEach((section) => {
      sectionObserver.observe(section)
    })
  }
  
  // T·∫°o ho·∫°t h√¨nh cho ph·∫ßn t√≠nh nƒÉng
  animateFeatureSection(section) {
    const cards = section.querySelectorAll(".feature-card")
    cards.forEach((card, index) => {
      setTimeout(() => {
        card.style.transform = "translateY(0) scale(1)"
        card.style.opacity = "1"
      }, index * 100)
    })
  }
  
  // T·∫°o ho·∫°t h√¨nh cho ph·∫ßn c√°c b∆∞·ªõc
  animateStepsSection(section) {
    const steps = section.querySelectorAll(".step-card")
    steps.forEach((step, index) => {
      setTimeout(() => {
        step.classList.add("animate-step")
      }, index * 200)
    })
  }
  
  // T·∫°o ho·∫°t h√¨nh cho ph·∫ßn gi√° c·∫£
  animatePricingSection(section) {
    const cards = section.querySelectorAll(".pricing-card")
    cards.forEach((card, index) => {
      setTimeout(() => {
        card.style.transform = "translateY(0) scale(1)"
        card.style.opacity = "1"
      }, index * 150)
    })
  }
  
  // Th√™m ho·∫°t h√¨nh ƒë√°nh m√°y cho c√°c ph·∫ßn t·ª≠ vƒÉn b·∫£n
  setupTypingAnimation() {
    const typingElements = document.querySelectorAll("[data-typing]")
    
    typingElements.forEach((element) => {
      const text = element.textContent
      element.textContent = ""
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            this.typeText(element, text, 50)
            observer.unobserve(element)
          }
        })
      })
      
      observer.observe(element)
    })
  }
  
  // Ho·∫°t h√¨nh ƒë√°nh m√°y vƒÉn b·∫£n
  typeText(element, text, speed) {
    let i = 0
    const timer = setInterval(() => {
      element.textContent += text.charAt(i)
      i++
      if (i >= text.length) {
        clearInterval(timer)
      }
    }, speed)
  }
}

// CSS animations s·∫Ω ƒë∆∞·ª£c ch√®n v√†o
const scrollAnimationCSS = `
    .scroll-animate {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .animate-in {
        opacity: 1 !important;
        transform: translateY(0) !important;
    }
    
    .fadeInUp {
        animation: fadeInUp 0.8s ease-out forwards;
    }
    
    .fadeInLeft {
        animation: fadeInLeft 0.8s ease-out forwards;
    }
    
    .fadeInRight {
        animation: fadeInRight 0.8s ease-out forwards;
    }
    
    .fadeInScale {
        animation: fadeInScale 0.8s ease-out forwards;
    }
    
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes fadeInLeft {
        from {
            opacity: 0;
            transform: translateX(-50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes fadeInRight {
        from {
            opacity: 0;
            transform: translateX(50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes fadeInScale {
        from {
            opacity: 0;
            transform: scale(0.8);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    .animate-step {
        animation: stepAnimation 0.6s ease-out forwards;
    }
    
    @keyframes stepAnimation {
        0% {
            opacity: 0;
            transform: translateY(30px) scale(0.9);
        }
        50% {
            transform: translateY(-10px) scale(1.05);
        }
        100% {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
    
    .section-visible {
        animation: sectionFadeIn 1s ease-out forwards;
    }
    
    @keyframes sectionFadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    
    /* Hi·ªáu ·ª©ng hover cho n√∫t cu·ªôn l√™n ƒë·∫ßu trang */
    .scroll-to-top:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    }
    
    /* Ho·∫°t h√¨nh c·∫£i ti·∫øn cho th·∫ª t√≠nh nƒÉng */
    .feature-card {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .feature-card:hover .feature-icon {
        animation: iconBounce 0.6s ease-in-out;
    }
    
    @keyframes iconBounce {
        0%, 100% { transform: scale(1) rotate(0deg); }
        25% { transform: scale(1.1) rotate(-5deg); }
        75% { transform: scale(1.1) rotate(5deg); }
    }
    
    /* Ho·∫°t h√¨nh c·∫£i ti·∫øn cho th·∫ª gi√° c·∫£ */
    .pricing-card {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .pricing-card:hover {
        transform: translateY(-15px) scale(1.02);
    }
    
    /* Ho·∫°t h√¨nh thanh ti·∫øn ƒë·ªô */
    .progress-bar {
        height: 4px;
        background: var(--accent-color);
        border-radius: 2px;
        transition: width 0s;
    }
    
    /* T·ªëi ∆∞u h√≥a cho di ƒë·ªông */
    @media (max-width: 768px) {
        .scroll-animate {
            transform: translateY(20px);
        }
        
        .scroll-to-top {
            bottom: 20px !important;
            right: 20px !important;
            width: 45px !important;
            height: 45px !important;
        }
    }
    
    /* H·ªó tr·ª£ gi·∫£m chuy·ªÉn ƒë·ªông */
    @media (prefers-reduced-motion: reduce) {
        .scroll-animate,
        .animate-in,
        .feature-card,
        .pricing-card {
            animation: none !important;
            transition: none !important;
        }
    }
`

// Kh·ªüi t·∫°o ho·∫°t h√¨nh cu·ªôn khi DOM ƒë∆∞·ª£c t·∫£i
document.addEventListener("DOMContentLoaded", () => {
  // Ch√®n CSS
  const style = document.createElement("style")
  style.textContent = scrollAnimationCSS
  document.head.appendChild(style)
  
  // Kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn ho·∫°t h√¨nh cu·ªôn
  const scrollController = new ScrollAnimationController()
  
  // Th√™m ho·∫°t h√¨nh t·∫£i cho trang
  document.body.style.opacity = "0"
  setTimeout(() => {
    document.body.style.transition = "opacity 0.5s ease-in-out"
    document.body.style.opacity = "1"
  }, 100)
  
  // Thi·∫øt l·∫≠p c√°c hi·ªáu ·ª©ng cu·ªôn b·ªï sung
  
  
  console.log("üé¨ Ho·∫°t h√¨nh cu·ªôn trang ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
})

// Xu·∫•t ƒë·ªÉ s·ª≠ d·ª•ng b√™n ngo√†i n·∫øu c·∫ßn
window.ScrollAnimationController = ScrollAnimationController